# Generated by Django 5.1.5 on 2025-05-24 13:23

import django.core.validators
import django.db.models.deletion
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('appointment', '__first__'),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='MedicalRecord',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True, db_index=True)),
                ('updated_at', models.DateTimeField(auto_now=True, db_index=True)),
                ('diagnosis', models.TextField(blank=True)),
                ('treatment', models.TextField(blank=True)),
                ('prescription', models.TextField(blank=True)),
                ('lab_results', models.TextField(blank=True)),
                ('follow_up_required', models.BooleanField(db_index=True, default=False)),
                ('follow_up_date', models.DateField(blank=True, null=True)),
                ('blood_pressure_systolic', models.PositiveIntegerField(blank=True, help_text='Systolic blood pressure (70-250 mmHg)', null=True, validators=[django.core.validators.MinValueValidator(70), django.core.validators.MaxValueValidator(250)])),
                ('blood_pressure_diastolic', models.PositiveIntegerField(blank=True, help_text='Diastolic blood pressure (40-150 mmHg)', null=True, validators=[django.core.validators.MinValueValidator(40), django.core.validators.MaxValueValidator(150)])),
                ('heart_rate', models.PositiveIntegerField(blank=True, help_text='Heart rate (30-220 bpm)', null=True, validators=[django.core.validators.MinValueValidator(30), django.core.validators.MaxValueValidator(220)])),
                ('temperature', models.DecimalField(blank=True, decimal_places=1, help_text='Body temperature (95.0-110.0Â°F)', max_digits=4, null=True, validators=[django.core.validators.MinValueValidator(95.0), django.core.validators.MaxValueValidator(110.0)])),
                ('weight', models.DecimalField(blank=True, decimal_places=2, help_text='Weight in pounds (10-1000 lbs)', max_digits=5, null=True, validators=[django.core.validators.MinValueValidator(10.0), django.core.validators.MaxValueValidator(1000.0)])),
                ('height', models.DecimalField(blank=True, decimal_places=2, help_text='Height in inches (12-96 inches)', max_digits=5, null=True, validators=[django.core.validators.MinValueValidator(12.0), django.core.validators.MaxValueValidator(96.0)])),
                ('allergies', models.TextField(blank=True, help_text='Known allergies')),
                ('medications', models.TextField(blank=True, help_text='Current medications')),
                ('medical_history', models.TextField(blank=True, help_text='Relevant medical history')),
                ('is_sensitive', models.BooleanField(default=False, help_text='Mark as sensitive/confidential record')),
                ('appointment', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='medical_record', to='appointment.appointment')),
            ],
            options={
                'db_table': 'medical_records',
            },
        ),
        migrations.CreateModel(
            name='LabResult',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True, db_index=True)),
                ('updated_at', models.DateTimeField(auto_now=True, db_index=True)),
                ('test_name', models.CharField(db_index=True, max_length=200)),
                ('test_type', models.CharField(choices=[('blood', 'Blood Test'), ('urine', 'Urine Test'), ('imaging', 'Imaging'), ('biopsy', 'Biopsy'), ('culture', 'Culture'), ('other', 'Other')], default='blood', max_length=50)),
                ('result_value', models.CharField(blank=True, max_length=100)),
                ('result_unit', models.CharField(blank=True, max_length=50)),
                ('reference_range', models.CharField(blank=True, max_length=100)),
                ('status', models.CharField(choices=[('normal', 'Normal'), ('abnormal', 'Abnormal'), ('critical', 'Critical'), ('pending', 'Pending')], default='pending', max_length=20)),
                ('notes', models.TextField(blank=True)),
                ('ordered_date', models.DateField()),
                ('result_date', models.DateField(blank=True, null=True)),
                ('medical_record', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='lab_results_records', to='medical_record.medicalrecord')),
            ],
            options={
                'db_table': 'lab_results',
            },
        ),
        migrations.CreateModel(
            name='Prescription',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True, db_index=True)),
                ('updated_at', models.DateTimeField(auto_now=True, db_index=True)),
                ('medication_name', models.CharField(db_index=True, max_length=200)),
                ('dosage', models.CharField(max_length=100)),
                ('frequency', models.CharField(max_length=100)),
                ('duration', models.CharField(max_length=100)),
                ('instructions', models.TextField(blank=True)),
                ('quantity', models.PositiveIntegerField(blank=True, help_text='Number of pills/units', null=True)),
                ('refills', models.PositiveIntegerField(default=0, help_text='Number of refills allowed')),
                ('is_generic_allowed', models.BooleanField(default=True)),
                ('is_active', models.BooleanField(db_index=True, default=True)),
                ('date_prescribed', models.DateField(auto_now_add=True)),
                ('date_filled', models.DateField(blank=True, null=True)),
                ('medical_record', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='prescriptions', to='medical_record.medicalrecord')),
            ],
            options={
                'db_table': 'prescriptions',
            },
        ),
        migrations.CreateModel(
            name='Review',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True, db_index=True)),
                ('updated_at', models.DateTimeField(auto_now=True, db_index=True)),
                ('rating', models.PositiveIntegerField(help_text='Rating from 1 to 5 stars', validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(5)])),
                ('review_text', models.TextField(blank=True)),
                ('communication_rating', models.PositiveIntegerField(blank=True, null=True, validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(5)])),
                ('professionalism_rating', models.PositiveIntegerField(blank=True, null=True, validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(5)])),
                ('wait_time_rating', models.PositiveIntegerField(blank=True, null=True, validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(5)])),
                ('is_verified', models.BooleanField(default=False)),
                ('is_anonymous', models.BooleanField(default=False)),
                ('appointment', models.OneToOneField(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='review', to='appointment.appointment')),
                ('doctor', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='received_reviews', to=settings.AUTH_USER_MODEL)),
                ('patient', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='given_reviews', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'db_table': 'reviews',
            },
        ),
        migrations.AddIndex(
            model_name='medicalrecord',
            index=models.Index(fields=['appointment'], name='medical_rec_appoint_c6c058_idx'),
        ),
        migrations.AddIndex(
            model_name='medicalrecord',
            index=models.Index(fields=['follow_up_required'], name='medical_rec_follow__a8c926_idx'),
        ),
        migrations.AddIndex(
            model_name='labresult',
            index=models.Index(fields=['test_name'], name='lab_results_test_na_4deeeb_idx'),
        ),
        migrations.AddIndex(
            model_name='labresult',
            index=models.Index(fields=['status'], name='lab_results_status_48502e_idx'),
        ),
        migrations.AddIndex(
            model_name='labresult',
            index=models.Index(fields=['medical_record'], name='lab_results_medical_ac5127_idx'),
        ),
        migrations.AddIndex(
            model_name='prescription',
            index=models.Index(fields=['medication_name'], name='prescriptio_medicat_a8b140_idx'),
        ),
        migrations.AddIndex(
            model_name='prescription',
            index=models.Index(fields=['medical_record'], name='prescriptio_medical_2943c0_idx'),
        ),
        migrations.AddIndex(
            model_name='prescription',
            index=models.Index(fields=['is_active'], name='prescriptio_is_acti_6d1fe6_idx'),
        ),
        migrations.AddIndex(
            model_name='review',
            index=models.Index(fields=['doctor', 'rating'], name='reviews_doctor__821800_idx'),
        ),
        migrations.AddIndex(
            model_name='review',
            index=models.Index(fields=['is_verified'], name='reviews_is_veri_aa479e_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='review',
            unique_together={('patient', 'doctor', 'appointment')},
        ),
    ]
